{"version":3,"sources":["assets/food.jpg","assets/final_logo.png","modules/components/LandingPage.js","modules/components/Main.js","App.js","serviceWorker.js","index.js","assets/avatar.png"],"names":["module","exports","avatarImg","require","foodImg","LandingPage","style","width","className","col","backgroundColor","alt","src","id","Component","Main","exact","path","process","component","logo","App","title","scroll","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,kC,0CCA3CD,EAAOC,QAAU,IAA0B,wC,yICIrCC,G,MAAYC,EAAQ,KACpBC,EAAUD,EAAQ,KA4FTE,E,uKAzFX,OACE,6BACE,yBAAKC,MAAO,CAAEC,MAAO,QAAUC,UAAU,aACvC,kBAAC,OAAD,KACE,kBAAC,OAAD,CAAMC,IAAK,GAAID,UAAU,eACvB,wBAAIA,UAAU,eAAd,sBACA,wBAAIA,UAAU,eAAd,iCACA,uBAAGA,UAAU,aAAb,gSASN,yBAAKF,MAAO,CAAEC,MAAO,OAAQG,gBAAiB,YAC5C,kBAAC,OAAD,KACE,kBAAC,OAAD,CAAMD,IAAK,GACT,wBAAID,UAAU,eAAd,uBACA,uBAAGA,UAAU,aAAb,uLAKA,wBAAIA,UAAU,eAAd,0BACA,uBAAGA,UAAU,aAAb,6HAIA,wBAAIA,UAAU,eAAd,2BACA,uBAAGA,UAAU,aAAb,+JAMF,kBAAC,OAAD,CAAMC,IAAK,GACT,yBAAKE,IAAI,GAAGC,IAAKR,EAASG,MAAM,YAItC,yBAAKD,MAAO,CAAEC,MAAO,QAAUC,UAAU,aACvC,kBAAC,OAAD,KACE,kBAAC,OAAD,CAAMC,IAAK,GAAID,UAAU,eACvB,wBAAIA,UAAU,eAAd,cACA,yBACED,MAAM,QACNI,IAAI,aACJH,UAAU,aACVI,IAAKV,IAEP,uBAAGM,UAAU,aAAb,mVAWN,yBAAKF,MAAO,CAAEC,MAAO,OAAQG,gBAAiB,WAAaG,GAAG,WAC5D,kBAAC,OAAD,KACE,kBAAC,OAAD,CAAMJ,IAAK,GACT,wBAAID,UAAU,eAAd,WACA,uBAAGA,UAAU,aAAb,oEAIF,kBAAC,OAAD,CAAMC,IAAK,GACT,uBAAGD,UAAU,aAAb,aAGA,uBAAGA,UAAU,aAAb,UAGA,uBAAGA,UAAU,aAAb,sB,GAhFYM,aCSXC,G,OAXF,WACX,OACE,yBAAKP,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOQ,OAAK,EAACC,KAAMC,qBAA8BC,UAAWd,IAC5D,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIE,UAAWd,QCKnCe,EAAOjB,EAAQ,KA8BNkB,MA7Bf,WACE,OACE,yBAAKb,UAAU,oBACb,kBAAC,SAAD,KACE,kBAAC,SAAD,CAAQc,MAAM,UAAUd,UAAU,aAAae,QAAM,GACnD,yBAAKZ,IAAI,UAAUC,IAAKQ,EAAMb,MAAM,SACpC,kBAAC,aAAD,KACE,uBAAGiB,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,gBACA,uBAAGA,KAAK,YAAR,aAGJ,kBAAC,SAAD,CAAQF,MAAM,WACZ,kBAAC,aAAD,KACE,uBAAGE,KAAK,KAAR,QACA,uBAAGA,KAAK,KAAR,gBACA,uBAAGA,KAAK,KAAR,aAGJ,kBAAC,UAAD,KACE,yBAAKhB,UAAU,gBACb,kBAAC,EAAD,WCxBQiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,0BCRNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,uHEzI5B3C,EAAOC,QAAU,IAA0B,qC","file":"static/js/main.6c6a0104.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/food.9924861c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/final_logo.ebb43a08.png\";","import React, { Component } from \"react\";\nimport { Grid, Cell } from \"react-mdl\";\nimport \"./LandingPage.css\";\n\nconst avatarImg = require(\"../../assets/avatar.png\");\nconst foodImg = require(\"../../assets/food.jpg\");\nclass LandingPage extends Component {\n  render() {\n    return (\n      <div>\n        <div style={{ width: \"100%\" }} className=\"MainStyle\">\n          <Grid>\n            <Cell col={12} className=\"LandingGrid\">\n              <h1 className=\"headersMain\">Delivery inovador.</h1>\n              <h1 className=\"headersMain\"> Uma experiência única.</h1>\n              <p className=\"SubHeader\">\n                Com a nossa solução, o caminho entre o pedido e o usuário será\n                intermediado por nós, que garantiremos satisfação e felicidade\n                para seus consumidores. Basta integrar nossa solução ao seu App\n                e você rapidamente terá acesso a todos os nossos recursos.\n              </p>\n            </Cell>\n          </Grid>\n        </div>\n        <div style={{ width: \"100%\", backgroundColor: \"#333333\" }}>\n          <Grid>\n            <Cell col={5}>\n              <h5 className=\"subDelivery\">Entrega Customizada</h5>\n              <p className=\"pDelivery\">\n                Durante todas as etapas da entrega: preparo, pedido a caminho e\n                pós venda, seu cliente receberá total atenção do nosso sistema,\n                garantindo uma experiência única.\n              </p>\n              <h5 className=\"subDelivery\">Playlist Personalizada</h5>\n              <p className=\"pDelivery\">\n                Enviaremos playlists com músicas que atendam o perfil do seu\n                cliente para ele enquanto ele espera ou degusta a comida.\n              </p>\n              <h5 className=\"subDelivery\">Fotos durante o preparo</h5>\n              <p className=\"pDelivery\">\n                Para aumentar a transparência com seu cliente, você poderá\n                enviar para ele fotos durante o preparo do seu pedido, trazendo\n                segurança para ele.\n              </p>\n            </Cell>\n            <Cell col={7}>\n              <img alt=\"\" src={foodImg} width=\"100%\" />\n            </Cell>\n          </Grid>\n        </div>\n        <div style={{ width: \"100%\" }} className=\"MainStyle\">\n          <Grid>\n            <Cell col={12} className=\"LandingGrid\">\n              <h2 className=\"subDelivery\">Quem somos</h2>\n              <img\n                width=\"180px\"\n                alt=\"Quem Somos\"\n                className=\"avatar-img\"\n                src={avatarImg}\n              />\n              <p className=\"pDelivery\">\n                Idealizados no Hackaton de FoodService Sancathon, nossa meta é\n                ajudar pequenos e médios restaurantes a aumentar seus lucros\n                através de uma experiência mais prazerosa para seus consumidores\n                finais. Desenvolvendo em parceria com aplicativos de Delivery,\n                pretendemos revolucionar a forma como o Delivery funciona no\n                Brasil.\n              </p>\n            </Cell>\n          </Grid>\n        </div>\n        <div style={{ width: \"100%\", backgroundColor: \"#333333\" }} id=\"contact\">\n          <Grid>\n            <Cell col={8}>\n              <h2 className=\"subDelivery\">Gostou?</h2>\n              <p className=\"pDelivery\">\n                Então entre em contato conosco o mais rápido possível!\n              </p>\n            </Cell>\n            <Cell col={4}>\n              <p className=\"pDelivery\">\n                Telefone: \n              </p>\n              <p className=\"pDelivery\">\n                Email:\n              </p>\n              <p className=\"pDelivery\">\n                Instagram:\n              </p>\n            </Cell>\n          </Grid>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n","import { Switch, Route } from \"react-router-dom\";\nimport LandingPage from \"./LandingPage\";\nimport React from \"react\";\nimport \"./Main.css\";\nconst Main = () => {\n  return (\n    <div className=\"Main\">\n      <Switch>\n        <Route exact path={process.env.PUBLIC_URL + '/'} component={LandingPage} />\n        <Route exact path=\"/\" component={LandingPage} />\n      </Switch>\n    </div>\n  );\n};\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  Layout,\n  Navigation,\n  Header,\n  Drawer,\n  Content,\n  Footer,\n  FooterLinkList,\n  FooterSection,\n} from \"react-mdl\";\nimport Main from \"./modules/components/Main\";\n\nconst logo = require(\"./assets/final_logo.png\");\nfunction App() {\n  return (\n    <div className=\"demo-big-content\">\n      <Layout>\n        <Header title=\"XTrajoy\" className=\"Navigation\" scroll>\n          <img alt=\"XTraJoy\" src={logo} width=\"50px\"></img>\n          <Navigation>\n            <a href=\"/\">Home</a>\n            <a href=\"/\">Sobre Nós</a>\n            <a href=\"#contact\">Contato</a>\n          </Navigation>\n        </Header>\n        <Drawer title=\"XTrajoy\">\n          <Navigation>\n            <a href=\"/\">Home</a>\n            <a href=\"/\">Sobre Nós</a>\n            <a href=\"/\">Contato</a>\n          </Navigation>\n        </Drawer>\n        <Content>\n          <div className=\"page-content\">\n            <Main />\n          </div>\n        </Content>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'react-mdl/extra/material.css';\nimport 'react-mdl/extra/material.js';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/avatar.8ceb7e02.png\";"],"sourceRoot":""}